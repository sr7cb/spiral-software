Load(graph);
Import(graph);
opts := SpiralDefaults;
opts.useDeref := false;
opts.globalUnrolling := 0;
M := var.fresh_t("M", TPtr(TReal));
opts.symbol := [M];
i := Ind(3);
j := Ind(3);
scat := Scat(fTensor(fBase(i), fBase(j))); 
gath := Gath(fStack(fTensor(fBase(i), fId(3)), fTensor(fId(3), fBase(j))));
scp := SPLScope.freshScope();
kernel := scat * SPLScope(RowVec(FDataOfs(scp,6,V(3))), scp) * gath;
mxm := ISum(i, 3, ISum(j, 3, kernel));
maskedmxm := Mask(FDataOfs(M, 9, 0)) * mxm;
maskedmxm2 := Rewrite(maskedmxm, RulesMask, opts);
maskedmxm3 := Rewrite(maskedmxm2, RulesSPLScope, opts);
rt := RandomRuleTree(last, opts);
srt := SumsRuleTree(rt, opts);
cs := CodeSums(srt, opts);
PrintCode("maskedmxm", cs, opts);